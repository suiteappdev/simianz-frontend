//region Imports
'use strict';

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _logging = require('./logging');

var _logging2 = _interopRequireDefault(_logging);

var _live = require('./live');

var _locator = require('./locator');

var _locator2 = _interopRequireDefault(_locator);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

//endregion

// Singleton app instance.
var live = new _live.Live();

// Setup basic logging.
(0, _logging2['default'])(live.container);

// opts.fn - an easy way to add hooks without creating a module.
function main(opts) {

  _lodash2['default'].defaults(opts, {
    beforeStart: function beforeStart(live) {}
  });

  // Locate and register plugins.

  if (!__CLIENT__) {
    (0, _locator2['default'])().map(function (file) {
      var module = require(file);
      live.register(module, file);
    });
  } else {
    _Object$keys(window.livePlugins).map(function (file) {
      var module = window.livePlugins[file];
      live.register(module, file);
    });
  }

  opts.beforeStart(live);

  // Start app.

  live.start().then(function () {
    // App has now started.
  });

  return live;
}

// Singleton app instance.
// E.g. When using `import {live} from 'live-app'` syntax to access the app.
main.live = live;

main.Live = _live.Live;
main.Locator = _locator2['default'].Locator;

module.exports = main;
//# sourceMappingURL=index.js.map
