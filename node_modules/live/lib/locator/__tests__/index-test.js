//region Imports
'use strict';

var mock = require('mock-fs');
var locator = require('..');
var fs = require('fs');
//endregion

describe('Locator', function () {

  beforeEach(function () {

    // For `babel/register`, and webpack.
    var liverc = {
      globals: {},
      moduleDirectories: ['modules']
    };

    var livercStr = 'module.exports = ' + JSON.stringify(liverc);

    function makeApp() {
      return {
        'package.json': 'TODO',
        '.liverc': livercStr,
        'modules': {
          foo: {
            'live.js': 'module.exports = function(live) { return "foo" }'
          },
          bar: {
            'live.js': 'module.exports = function(live) { return "bar" }'
          }
        }
      };
    }

    // Create test dir structure.
    var testDir = {};
    testDir['/parentApp'] = makeApp();
    testDir['/parentApp/modules/childApp'] = makeApp();
    mock(testDir);
  });

  it('should work', function () {
    //console.log(process.cwd())
    //console.log(fs.readdirSync('/'))
    var actual = locator({ rootDir: '/parentApp' });
    var expected = ['/parentApp/modules/bar/live.js', '/parentApp/modules/foo/live.js'];
    expect(actual).to.eql(expected);
  });

  afterEach(function () {
    mock.restore();
  });
});
//# sourceMappingURL=index-test.js.map
