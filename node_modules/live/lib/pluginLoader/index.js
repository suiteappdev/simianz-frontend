//region Imports
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _locator = require('../locator');

var _locator2 = _interopRequireDefault(_locator);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _string = require('string');

var _string2 = _interopRequireDefault(_string);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _coreJsLibraryFnDict = require('core-js/library/fn/dict');

var _coreJsLibraryFnDict2 = _interopRequireDefault(_coreJsLibraryFnDict);

var _outlet = require('outlet');

var _isNode = require('is-node');

var _isNode2 = _interopRequireDefault(_isNode);

var _eventemitter3 = require('eventemitter3');

var _eventemitter32 = _interopRequireDefault(_eventemitter3);

//endregion

var useDynamicRequire = false;

var PluginLoader = (function () {
  function PluginLoader(container) {
    _classCallCheck(this, PluginLoader);

    this.container = container;
    _lodash2['default'].defaults(this.container, {
      vent: new _eventemitter32['default'](),
      state: {}
    });
  }

  _createClass(PluginLoader, [{
    key: 'loadPlugins',
    value: function loadPlugins() {
      var _this = this;

      var _getPluginFiles = this.getPluginFiles(this.container);

      var files = _getPluginFiles.files;
      var dynamicRequire = _getPluginFiles.dynamicRequire;

      (0, _lodash2['default'])(files).each(function (f) {
        var rawModule = _this.requireModule(f, dynamicRequire);
        _this.register(rawModule, f);
      }).run();

      // TODO: Files are two different things (webpack or node path). Change this.
      return files;
    }
  }, {
    key: 'register',
    value: function register(rawModule) {
      var fullPath = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

      var _getLiveModule = this.getLiveModule(rawModule);

      var module = _getLiveModule.module;
      var registerFn = _getLiveModule.registerFn;

      // Invalid module.
      if (!module) {
        var text = fullPath ? fullPath : '\n' + rawModule.toString();
        this.container.vent.emit('invalid-module', text);
        return;
      }

      // Set module name, if it doesn't exist.
      if (!module.$name) module.$name = this.getModuleName(fullPath, module);

      this.printPlugin(fullPath, module.$name);

      this.registerLiveModule({ module: module, registerFn: registerFn });
    }

    ///
    /// Allows us to support a variety of Live module formats.
    ///
    /// We need to do two things with modules.
    /// - Read meta-data from the module.
    /// - Pass the Live application instance to a registration function.
    ///
    /// @param {} module - the result of a `require(...)` call.
    /// @returns {object} obj
    /// @returns {object} obj.module - the instantiated Live module.
    /// @returns {Function} obj.registerFn - function which is passed the Live application instance.
    ///
  }, {
    key: 'getLiveModule',
    value: function getLiveModule(rawModule) {

      // Plain object.
      if (rawModule.register) return { module: rawModule, registerFn: rawModule.register };

      // Class.
      if (rawModule.prototype) {
        if (!rawModule.prototype.register) return { module: null };
        var liveModule = new rawModule();
        return { module: liveModule, registerFn: liveModule.register };
      }

      // Function.
      if (_lodash2['default'].isFunction(rawModule)) {
        return { module: rawModule, registerFn: rawModule };
      }

      return { module: null };
    }
  }, {
    key: 'getModuleName',
    value: function getModuleName(fullPath, module) {
      if (module.name) return module.name;
      if (fullPath) {
        //if (!isNode) return null
        return _path2['default'].basename(_path2['default'].dirname(fullPath)); // TODO: Double check this works for webpack - context.keys()! Maybe we can get more info from the context.)
      } else {
          return null;
        }
    }

    //
    // Register a module.
    //
    // Calls the register method on a module.
    //
  }, {
    key: 'registerLiveModule',
    value: function registerLiveModule(_ref) {
      var module = _ref.module;
      var registerFn = _ref.registerFn;

      var moduleName = module.$name;

      // Create a namespace for each module in our `state` variable in our container.

      this.createContainerStateNamespace(moduleName);

      // Register plugin.

      var live = new _outlet.Outlet(this.container);
      live.moduleName = moduleName;
      registerFn.call(module, live);
    }
  }, {
    key: 'createContainerStateNamespace',
    value: function createContainerStateNamespace(moduleName) {
      if (moduleName) {
        var ns = (0, _string2['default'])(moduleName).camelize();
        // Multiple modules maybe be registered under one namespace when using `live.shared.js`.
        if (!this.container.state[ns]) this.container.state[ns] = {};
      } else {
        throw new Error('You must provide a name for your plugin. Add a `$name` property to the live file.');
      }
    }
  }, {
    key: 'requireModule',
    value: function requireModule(f) {
      if (__CLIENT__) {
        // Plugins will already be setup on window object.
        console.log('Requiring module:', f);
        return window.livePlugins[f];
      } else {
        return require('./node')(f);
      }
    }
  }, {
    key: 'getPluginFiles',
    value: function getPluginFiles() {
      var files = undefined;
      if (__CLIENT__) {
        // NOTE: This file is generated on webpack build.
        //const livePlugins = require('generated/live-browser-plugin-requires-generated')
        var livePlugins = window.livePlugins; // Alternative.
        console.log('Found Live Plugins', livePlugins);
        files = _Object$keys(livePlugins);
      } else {
        files = (0, _locator2['default'])();
      }
      return { files: files };
    }
  }, {
    key: 'getRawModules',
    value: function getRawModules(files) {}

    // TODO(vjpr): Add an explanation of how this works. Reading from the top should
    // explain everything. Who calls what and from where.

  }, {
    key: 'printPlugin',
    value: function printPlugin(fullPath, moduleName) {
      var relPath = fullPath ? _path2['default'].relative(process.cwd(), fullPath) : '';
      this.container.vent.emit('register-plugin', { moduleName: moduleName, relPath: relPath });
    }
  }]);

  return PluginLoader;
})();

exports.PluginLoader = PluginLoader;
//# sourceMappingURL=index.js.map
