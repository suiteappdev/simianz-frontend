//region Imports
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getCallerFile = getCallerFile;
exports.makeIDELink = makeIDELink;
exports.getIDELink = getIDELink;

var _isNode = require('is-node');

var _isNode2 = _interopRequireDefault(_isNode);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

//endregion

//
// Get callsite info for logging purposes.
// Used to log urls in terminal which will open the IDE with the file open.
//

// TODO(vjpr): Maybe use callsite instead.

function getCallerFile() {
  var index = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

  var DEFAULT_INDEX = 1;
  if (_isNode2['default']) {
    var callsite = require('callsite');
    var stack = callsite();
    var line = stack[DEFAULT_INDEX + index];
    return {
      path: line.getFileName(),
      line: line.getLineNumber(),
      col: line.getColumnNumber()
    };
  } else {
    // TODO(vjpr): Implement for browser. stackinfo is buggy.
    //return stackinfo()[INDEX]
    return null;
  }
}

//
// Remote Call IntelliJ Plugin
//

// Accepts fuzzy path, but browser window opens.
function remoteCallPlugin(info) {
  //const host = 's' // TODO: Add config option.
  var host = 'localhost';
  var message = ('' + info.addr).bold;
  return 'http://' + host + ':8091/?message=' + message;
}

//
// IntelliJ Native URL support
//

// Requires full file path, but no browser window opens.
function ideaProtocol(info, moduleName, opts) {
  if (!info) return '<no-path-found>';
  var file = info.path;
  if (moduleName) {
    var path = require('path');
    moduleName = path.relative(process.cwd(), info.path);
    if (opts.color) file = file.replace(moduleName, _chalk2['default'].bold(moduleName));
  }
  return 'idea://open?file=' + file + '&line=' + info.line + ':' + info.col;
  //return `idea://open?url=file://${call.path}&line=${call.line}:${call.col}`
}

// -----------------------------------------------------------------------------

function makeIDELink(info) {
  var moduleName = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  _lodash2['default'].defaults(opts, { color: false });
  return ideaProtocol(info, moduleName, opts);
  //return remoteCallPlugin(info) // TODO: Add config option.
}

function getIDELink() {
  var index = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  _lodash2['default'].defaults(opts, { color: false });
  var CALLS = 1; // Calls until generated new Error is reached (see `callsite` module).
  var call = getCallerFile(CALLS + index);
  return makeIDELink(call, _lodash2['default'], opts);
}

// TODO: Not in use. Remove.
//export function getCallerFileFromPrettyError(index = 3) {
//  const e = new Error
//  const liveError = require('live-error')
//  const pe = liveError.getParsedError(e)
//  const line = pe._trace[index]
//  return line
//}
//# sourceMappingURL=index.js.map
