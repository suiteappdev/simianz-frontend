//region Imports
import isNode from 'is-node'
import c from 'chalk'
import _ from 'lodash'
//endregion

//
// Get callsite info for logging purposes.
// Used to log urls in terminal which will open the IDE with the file open.
//

// TODO(vjpr): Maybe use callsite instead.
export function getCallerFile(index = 0) {
  const DEFAULT_INDEX = 1
  if (isNode) {
    const callsite = require('callsite')
    const stack = callsite()
    const line = stack[DEFAULT_INDEX + index]
    return {
      path: line.getFileName(),
      line: line.getLineNumber(),
      col: line.getColumnNumber(),
    }
  } else {
    // TODO(vjpr): Implement for browser. stackinfo is buggy.
    //return stackinfo()[INDEX]
    return null
  }
}

//
// Remote Call IntelliJ Plugin
//

// Accepts fuzzy path, but browser window opens.
function remoteCallPlugin(info) {
  //const host = 's' // TODO: Add config option.
  const host = 'localhost'
  const message = `${info.addr}`.bold
  return `http://${host}:8091/?message=${message}`
}

//
// IntelliJ Native URL support
//

// Requires full file path, but no browser window opens.
function ideaProtocol(info, moduleName, opts) {
  if (!info) return '<no-path-found>'
  let file = info.path
  if (moduleName) {
    const path = require('path')
    moduleName = path.relative(process.cwd(), info.path)
    if (opts.color) file = file.replace(moduleName, c.bold(moduleName))
  }
  return `idea://open?file=${file}&line=${info.line}:${info.col}`
  //return `idea://open?url=file://${call.path}&line=${call.line}:${call.col}`
}

// -----------------------------------------------------------------------------

export function makeIDELink(info, moduleName = true, opts = {}) {
  _.defaults(opts, {color: false})
  return ideaProtocol(info, moduleName, opts)
  //return remoteCallPlugin(info) // TODO: Add config option.
}

export function getIDELink(index = 0, opts = {}) {
  _.defaults(opts, {color: false})
  const CALLS = 1 // Calls until generated new Error is reached (see `callsite` module).
  const call = getCallerFile(CALLS + index)
  return makeIDELink(call, _, opts)
}

// TODO: Not in use. Remove.
//export function getCallerFileFromPrettyError(index = 3) {
//  const e = new Error
//  const liveError = require('live-error')
//  const pe = liveError.getParsedError(e)
//  const line = pe._trace[index]
//  return line
//}
