'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var Benchmark = require('benchmark');
var suite = new Benchmark.Suite('Outlet');

var _require = require('../outlet');

var Outlet = _require.Outlet;

process.on('unhandledException', function () {
  throw e;
});

function ee(EventEmitter, deferred) {
  var emitter = new EventEmitter();
  emitter.on('foo:before', function () {
    emitter.emit('foo');
  });
  emitter.on('foo', function () {
    emitter.emit('foo:after');
  });
  emitter.on('foo:after', function () {
    deferred.resolve();
  });
  emitter.emit('foo:before');
}

suite.add('Outlet#run (async/await)', function (deferred) {
  var _this = this;

  var container = {};
  var outlet = new Outlet(container);
  var eventName = 'foo';
  var event = outlet.event(eventName);
  outlet.before(eventName, function callee$1$0(opts) {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  outlet.after(eventName, function callee$1$0(opts) {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  event.run({}, function callee$1$0(opts, results) {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  }).then(function () {
    deferred.resolve();
  });
}, { defer: true })

// TODO
//.add('Outlet#run (callbacks)', function(deferred) {
//  const container = {}
//  const outlet = new Outlet(container)
//  const eventName = 'foo'
//  const event = outlet.event(eventName)
//  outlet.before(eventName, (done) => {})
//  outlet.after(eventName, (done) => {})
//  event.run({}, (done) => {}).then(() => {
//    deferred.resolve()
//  })
//}, {defer: true})

.add('understudy', function (deferred) {
  var Understudy = require('understudy');
  var actor = new Understudy();
  var eventName = 'foo';
  actor.before(eventName, function (next) {
    next('hello');
  });
  actor.after(eventName, function (next) {
    next();
    deferred.resolve();
  });
  actor.perform(eventName, function (next) {
    next('hello');
  });
}, { defer: true }).add('EventEmitter', function (deferred) {
  var EventEmitter = require('events');
  ee(EventEmitter, deferred);
}, { defer: true }).add('EventEmitter3', function (deferred) {
  var EventEmitter = require('eventemitter3');
  ee(EventEmitter, deferred);
}, { defer: true });

suite.on('cycle', function (event) {
  console.log(String(event.target));
});

if (!module.parent) {
  suite.run();
}

module.exports = suite;
//# sourceMappingURL=index.js.map
