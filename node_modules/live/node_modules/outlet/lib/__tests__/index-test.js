//region Imports
'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _ = require('..');

//import t from 'exectimer'
//endregion

process.on('unhandledRejection', function (e) {
  throw e;
});

describe('Event', function () {

  it('sets name', function () {
    var name = 'foo';
    var event = new _.Event(name);
    expect(event.name).to.equal(name);
  });
});

describe('Outlet', function () {
  var _this = this;

  it('callbacks fire in the correct order', function (done) {

    var eventName = 'foo';
    var outlet = new _.Outlet();
    var event = outlet.event(eventName);

    var beforeCb1 = sinon.spy();
    var beforeCb2 = sinon.spy();
    var runCb = sinon.spy();
    var afterCb1 = sinon.spy();
    var afterCb2 = sinon.spy();

    outlet.before('foo', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            beforeCb1();

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    outlet.before('foo', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            beforeCb2();

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    outlet.after('foo', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            afterCb1();

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    outlet.after('foo', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            afterCb2();

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    event.run({}, function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            runCb();

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    }).then(function () {
      beforeCb1.should.be.calledBefore(beforeCb2);
      beforeCb2.should.be.calledBefore(runCb);
      runCb.should.have.been.calledOnce;
      afterCb1.should.be.calledAfter(runCb);
      afterCb2.should.be.calledAfter(afterCb1);
      done();
    });
  });

  it('callbacks fire in correct order', function () {});
});
//# sourceMappingURL=index-test.js.map
