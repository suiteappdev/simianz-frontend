//region Imports
'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

//import stackinfo from 'stackinfo'

var _isNode = require('is-node');

var _isNode2 = _interopRequireDefault(_isNode);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _liveCaller = require('live-caller');

var _logCallsite = require('./logCallsite');

var _logCallsite2 = _interopRequireDefault(_logCallsite);

//endregion

// Uncomment to track to spurious console.log calls.
//logCallsite.hookConsoleLog()

var Logger = (function () {
  function Logger(ns) {
    _classCallCheck(this, Logger);

    this.ns = '';

    this.ns = ns;
    this.debugModule = (0, _debug2['default'])(ns);
  }

  _createClass(Logger, [{
    key: 'log',
    value: function log() {
      //const callInfo = callsite()
      console.log.apply(console, arguments);
      return this;
    }
  }, {
    key: 'debug',
    value: function debug() {
      var callInfo = (0, _liveCaller.getCallerFile)();
      //this.debug(...args)
      console.log.apply(console, arguments);
      if (callInfo) console.log('  ' + _chalk2['default'].gray((0, _liveCaller.makeIDELink)(callInfo)));
      return this;
    }
  }, {
    key: 'error',
    value: function error() {
      console.error.apply(console, arguments);
      return this;
    }
  }, {
    key: 'warn',
    value: function warn() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      console.warn.apply(console, ['WARNING:'].concat(args));
      return this;
    }
  }]);

  return Logger;
})();

var Decorators = function Decorators() {
  _classCallCheck(this, Decorators);
}

// Main export.

;

var logger = function logger(ns) {
  return new Logger(ns);
};

// For convenience without having to instantiate a logger using `new` (e.g. `import log from 'live-log`)
// we create a singleton instance of the logger.

var singleton = new Logger();

logger.log = singleton.log;

logger.debug = singleton.debug;

module.exports = logger;

// TODO: Maybe don't cache the logger so it creates an instance each time
//  and uses the callsite to get the name of the module.
//# sourceMappingURL=index.js.map
