//region Imports
import debug from 'debug'
//import stackinfo from 'stackinfo'
import isNode from 'is-node'
import chalk from 'chalk'
import {getCallerFile, makeIDELink} from 'live-caller'
import logCallsite from './logCallsite'
//endregion

// Uncomment to track to spurious console.log calls.
//logCallsite.hookConsoleLog()

class Logger {

  ns = ''

  constructor(ns) {
    this.ns = ns
    this.debugModule = debug(ns)
  }

  log(...args) {
    //const callInfo = callsite()
    console.log(...args)
    return this
  }

  debug(...args) {
    const callInfo = getCallerFile()
    //this.debug(...args)
    console.log(...args)
    if (callInfo) console.log('  ' + chalk.gray(makeIDELink(callInfo)))
    return this
  }

  error(...args) {
    console.error(...args)
    return this
  }

  warn(...args) {
    console.warn('WARNING:', ...args)
    return this
  }

}

class Decorators {

  logFn

}

// Main export.

const logger = (ns) => {
  return new Logger(ns)
}

// For convenience without having to instantiate a logger using `new` (e.g. `import log from 'live-log`)
// we create a singleton instance of the logger.

const singleton = new Logger

logger.log = singleton.log

logger.debug = singleton.debug

module.exports = logger

// TODO: Maybe don't cache the logger so it creates an instance each time
//  and uses the callsite to get the name of the module.
